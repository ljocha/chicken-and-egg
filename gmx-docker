#!/bin/bash

IMAGE_BASE=ljocha
VERSION=:2020.02.06-1

DEFAULT_VERSION=$VERSION

DOUBLE=""
WORKDIR_CURRENT=""

eval set -- $(getopt -o +pcda:rw:Rv:n:h -- "$@")
unset MPI
unset PODMAN
unset ARCH
unset RDTSCP
unset CLEAN

while [ $1 != '--' ]; do case $1 in
	-n) MPI="$2"; shift; shift ;;
	-d) DOUBLE="_d"; shift ;;
	-a) ARCH="$2"; shift; shift ;;
	-r) RDTSCP="_ts"; shift ;;
	-c) CLEAN=y; shift ;;
	-w) WORKDIR_CURRENT="$2"; shift; shift ;;
	-R) RDTSCP=""; shift ;;
	-v) VERSION=":$2"; shift; shift ;;
	-p) PODMAN=y; shift ;;
	-h) cat >&2 <<EOF
usage: $0 options [--] gromacs_args ...

options are:
	-n		MPI processes
	-d		double precision
	-a arch		enforce specific CPU architecture (sse2, avx, avx2, avx512)
	-r		enforce RDTSCP (should be detected)
	-w		select working directory relative to shared one for current enumeration
	-R		disable RDTSCP
	-c		cleanup -- just remove docker image 
	-p		use podman instead of docker
	-v version	use specific docker image version ($DEFAULT_VERSION by default)
EOF
	exit 1;;
	--) shift; break ;;
esac; done

if [ -n "$PODMAN" ]; then
	if [ -z "$SCRATCHDIR" ]; then
		echo Warning: SCRATCHDIR not set, / may be filled up >&2
	else
		TMPDIR=$SCRATCHDIR
		export TMPDIR
	fi
	podman="podman --runtime /usr/bin/crun --root=${PWD}"
	podman_run="$podman run --privileged --cgroups disabled --hostname ${HOSTNAME}"
fi

FLAGS=`cat /proc/cpuinfo | grep ^flags | head -1`

if [ -z "$ARCH" ]; then
	if [ -n "$PODMAN" ]; then
		FMA="$($podman_run ${IMAGE_BASE}/gromacs-fmacnt${VERSION})"
	else
		FMA="$(docker run ${IMAGE_BASE}/gromacs-fmacnt${VERSION})"
	fi

	if echo $FLAGS | grep " avx512f " > /dev/null && echo "$FMA" | grep "^2" > /dev/null; then
	    ARCH="avx512"
	elif echo $FLAGS | grep " avx2 " > /dev/null; then
	    ARCH="avx2"
	elif echo $FLAGS | grep " avx " > /dev/null; then
	    ARCH="avx"
	else
	    ARCH="sse2"
	fi
fi
	
if [ -z "$RDTSCP" ]; then
	if echo $FLAGS | grep rdtscp >/dev/null; then
		RDTSCP=_ts
	fi
fi


while [ "$1" == '--' ]; do shift; done

# XXX: _ts_d should work fine but we don't build it
if [ -n "$DOUBLE" ]; then 
	RDTSCP=""; 
	echo warning: disabling RDTSCP with double precision >&2
fi

if [ -z "$WORKDIR_OUTSIDE" ]; then
	WORKDIR_OUTSIDE=${WORK:-$PWD}
fi

unset MPIRUN
if [ -n "$MPI" ]; then
	MPIRUN="mpirun -np $MPI"
fi

IMAGE=${IMAGE_BASE}/gromacs_${ARCH}${RDTSCP}${DOUBLE}${VERSION} 
VOLUME=${WORKDIR_OUTSIDE}${WORKDIR_CURRENT}:/tmp

if [ -n "$PODMAN" ]; then
	cat - >/tmp/gmx-podman.$$ <<EOF
#!/bin/bash

cp /host/usr/lib/nvidia/current/nvidia-smi /usr/bin
cp -rP /host/usr/lib/x86_64-linux-gnu/nvidia/current/* /usr/lib/x86_64-linux-gnu
cp -rP /host/usr/lib/mesa-diverted/x86_64-linux-gnu/* /usr/lib/x86_64-linux-gnu
EOF
	echo -n $MPIRUN gmx >>/tmp/gmx-podman.$$
	for a in "$@"; do
		echo -n " "\"$a\" >>/tmp/gmx-podman.$$
	done
	echo >>/tmp/gmx-podman.$$

	chmod +x /tmp/gmx-podman.$$

	$podman_run -e CUDA_VISIBLE_DEVICES -e CUDA_DEVICE_ORDER -v /:/host -v $VOLUME -ti  $IMAGE /host/tmp/gmx-podman.$$
	rm /tmp/gmx-podman.$$

else
# XXX: always grab all gpus
	if [ $(docker -v | sed 's/Docker version //; s/\..*$//;') -ge 19 ]; then
		gpu="--gpus all --device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm"
		for d in /dev/nvidia[0-9]*; do
			gpu="$gpu --device $d:$d"
		done
	fi

	if [ -n "$CLEAN" ]; then
		docker rmi --force ${IMAGE}
	else
		docker run -e CUDA_VISIBLE_DEVICES -e CUDA_DEVICE_ORDER $gpu -u $(id -u):$(id -g) -i -v $VOLUME ${IMAGE} $MPIRUN gmx "$@"
	fi
fi
